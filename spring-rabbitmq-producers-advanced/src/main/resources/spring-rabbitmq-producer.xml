<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
<!--加载配置文件-->
<!--    <context:property-placeholder location="classpath:rabbitmq.properties"></context:property-placeholder>-->
<!-- 定义rabbitmq connectionFactory   -->
    <rabbit:connection-factory id="connectionFactory" host="192.168.1.9"
                port="5672"
                username="admin"
                password="admin"
                virtual-host="zs"
                publisher-confirms="true"
                publisher-returns="true"
    ></rabbit:connection-factory>

<!--    定义管理交换机,队列(可以帮我们自动创建交换机)-->
    <rabbit:admin connection-factory="connectionFactory"></rabbit:admin>

<!--    定义rabbitmqTemplate 对象操作可以在代码中方便发送消息-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"></rabbit:template>


    <!--消息可靠性投递(生产端)    -->
    <rabbit:queue id="test_queue_confirm" name="test_queue_confirm"></rabbit:queue>

    <rabbit:direct-exchange name="test_exchange_confirm">
        <rabbit:bindings>
            <rabbit:binding queue="test_queue_confirm" key="confirm"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
<!--===============================TTL 开始=======================    -->
<!--    <rabbit:queue name="test_queue_ttl" id="test_queue_ttl">-->
<!--        <rabbit:queue-arguments>-->
<!--            <entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"></entry>-->
<!--        </rabbit:queue-arguments>-->
<!--    </rabbit:queue>-->

<!--    <rabbit:topic-exchange name="test_exchange_ttl">-->
<!--            <rabbit:bindings>-->
<!--                <rabbit:binding pattern="ttl.#" queue="test_queue_ttl"></rabbit:binding>-->
<!--            </rabbit:bindings>-->
<!--    </rabbit:topic-exchange>-->

<!--=========================死信队列========================-->

<!--
    死信队列：
        1.声明正常得队列(test_queue_dlx)和交换机(test_exchange_dlx)
        2.声明死信队列(queue_dlx)和死信交换机(exchange_dlx)
        3.正常队列绑定死信交换机
           设置两个参数：
                   * x-dead-letter-exchange: 死信交换机名称
                   * x-dead-letter-routing-key: 发送给死信交换机的 routingkey
 -->

    <!--  1.1 声明正常得队列(test_queue_dlx)和交换机(test_exchange_dlx) -->
    <rabbit:queue name="test_queue_dlx" id="test_queue_dlx">
        <rabbit:queue-arguments>
            <!--3.1: x-dead-letter-exchange 死信交换机名称; value 的值是 2.2 中的声明的死信交换机名称 -->
            <entry key="x-dead-letter-exchange" value="exchange_dlx"></entry>
            <!--3.2: x-dead-letter-routing-key: 发送给死信交换机的routingkey-->
            <entry key="x-dead-letter-routing-key" value="dlx.hehe"></entry>
            <!--4.1 设置队列的过期时间 ttl-->
            <entry key="x-message-ttl" value="1000" value-type="java.lang.Integer"></entry>
            <!--4.2 设置队列的长度限制 max-length-->
            <entry key="x-max-length" value="10" value-type="java.lang.Integer"></entry>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!--1.2 声明正常的交换机   -->
    <rabbit:topic-exchange name="test_exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="test.dlx.#" queue="test_queue_dlx"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--2.1 声明死信队列(queue_dlx) -->
    <rabbit:queue name="queue_dlx" id="queue_dlx"></rabbit:queue>
    <!--2.2 死信交换机(exchange_dlx)-->
    <rabbit:topic-exchange name="exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="dlx.#" queue="queue_dlx"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>
<!--=====================死信队列结束==============================-->



<!--=======================延迟队列=============================-->
    <!--
    延迟队列：
        1.声明正常得队列(order_queue)和交换机(order_exchange)
        2.声明死信队列(order_queue_dlx)和死信交换机(order_exchange_dlx)
        3.绑定，设置正常队列过期时间为30分钟
            正常队列绑定死信交换机
           设置两个参数：
                   * x-dead-letter-exchange: 死信交换机名称
                   * x-dead-letter-routing-key: 发送给死信交换机的 routingkey
 -->

    <!--  1.1 声明正常得队列(order_queue)和交换机(order_exchange) -->
    <rabbit:queue name="order_queue" id="order_queue">
        <rabbit:queue-arguments>
        <!--3.绑定，设置正常队列过期时间为30分钟，此处设置10秒钟演示来用           -->
            <!--3.1: x-dead-letter-exchange 死信交换机名称; value 的值是 2.2 中的声明的死信交换机名称 -->
            <entry key="x-dead-letter-exchange" value="order_exchange_dlx"></entry>
            <!--3.2: x-dead-letter-routing-key: 发送给死信交换机的routingkey-->
            <entry key="x-dead-letter-routing-key" value="dlx.order.cannel"></entry>
            <!--4.1 设置队列的过期时间 ttl-->
            <entry key="x-message-ttl" value="1000" value-type="java.lang.Integer"></entry>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!--1.2 声明正常的交换机   -->
    <rabbit:topic-exchange name="order_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="order.#" queue="order_queue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--2.1 声明死信队列(order_queue_dlx) -->
    <rabbit:queue name="order_queue_dlx" id="order_queue_dlx"></rabbit:queue>
    <!--2.2 死信交换机(exchange_dlx)-->
    <rabbit:topic-exchange name="order_exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="dlx.order.#" queue="order_queue_dlx"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>


</beans>
